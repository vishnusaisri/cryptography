#include <stdio.h>
#include <string.h>
#include <ctype.h>
// Function to generate cipher sequence from keyword
void generateCipherSequence(char keyword[], char cipherSeq[]) {
    int used[26] = {0};  // Track used letters
    int idx = 0;
    // Add keyword letters to cipherSeq
    for (int i = 0; i < strlen(keyword); i++) {
        char ch = toupper(keyword[i]);
        if (!used[ch - 'A']) {
            cipherSeq[idx++] = ch;
            used[ch - 'A'] = 1;
        }
    }
    // Add remaining unused letters
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            cipherSeq[idx++] = ch;
        }
    }
    cipherSeq[idx] = '\0';  // Null-terminate the string
}
// Function to encrypt plaintext
void encrypt(char plaintext[], char cipherSeq[]) {
    for (int i = 0; i < strlen(plaintext); i++) {
        char ch = plaintext[i];
        if (isalpha(ch)) {
            if (islower(ch))
                printf("%c", tolower(cipherSeq[ch - 'a']));
            else
                printf("%c", cipherSeq[ch - 'A']);
        } else {
            printf("%c", ch);
        }
    }
}
int main() {
    char keyword[] = "CIPHER";
    char cipherSeq[27];
    char plaintext[100];
    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0; // Remove newline if present
    generateCipherSequence(keyword, cipherSeq);
    printf("Cipher sequence: ");
    for (int i = 0; i < 26; i++)
        printf("%c ", cipherSeq[i]);
    printf("\n");
    printf("Ciphertext: ");
    encrypt(plaintext, cipherSeq);
    printf("\n");
    return 0;
}
