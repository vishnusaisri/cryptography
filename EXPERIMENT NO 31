#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define BLOCK_SIZE 16  // 128 bits

// Mock cipher: for demonstration, just fill L with a fixed pattern
void block_cipher_encrypt(uint8_t input[BLOCK_SIZE], uint8_t output[BLOCK_SIZE]) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        output[i] = i + 1;  // pretend result from cipher
    }
}

// Left shift by 1 bit
void left_shift(uint8_t *input, uint8_t *output) {
    uint8_t overflow = 0;
    for (int i = BLOCK_SIZE - 1; i >= 0; i--) {
        output[i] = (input[i] << 1) | overflow;
        overflow = (input[i] & 0x80) ? 1 : 0;
    }
}

// XOR last byte with Rb if needed
void xor_rb(uint8_t *block, uint8_t Rb) {
    block[BLOCK_SIZE - 1] ^= Rb;
}

// Print block
void print_block(const char *label, uint8_t *block) {
    printf("%s: ", label);
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02X ", block[i]);
    }
    printf("\n");
}

int main() {
    uint8_t zero_block[BLOCK_SIZE] = {0};
    uint8_t L[BLOCK_SIZE], K1[BLOCK_SIZE], K2[BLOCK_SIZE];
    uint8_t Rb = 0x87;  // For 128-bit CMAC

    // Step 1: L = E_K(0^blocksize)
    block_cipher_encrypt(zero_block, L);
    print_block("L", L);

    // Step 2: Generate K1
    left_shift(L, K1);
    if (L[0] & 0x80) {
        xor_rb(K1, Rb);
    }
    print_block("K1", K1);

    // Step 3: Generate K2
    left_shift(K1, K2);
    if (K1[0] & 0x80) {
        xor_rb(K2, Rb);
    }
    print_block("K2", K2);

    return 0;
}
