#include <stdio.h>
#include <stdint.h>

// Simple S-DES encrypt: placeholder (replace with actual S-DES)
uint8_t sdes_encrypt_block(uint8_t input, uint16_t key) {
    // Placeholder: XOR key low 8 bits
    return input ^ (key & 0xFF);
}

// CTR mode encryption/decryption
void ctr_process(uint8_t *input, uint8_t *output, int len, uint16_t key, uint8_t counter_start) {
    uint8_t counter = counter_start;
    for (int i = 0; i < len; i++) {
        uint8_t keystream = sdes_encrypt_block(counter, key);
        output[i] = input[i] ^ keystream;
        counter++;
    }
}

// Utility to print 8-bit value in binary
void print_binary(uint8_t val) {
    for (int i = 7; i >= 0; i--) {
        printf("%d", (val >> i) & 1);
    }
}

int main() {
    // Test data
    uint8_t plaintext[3] = { 0b00000001, 0b00000010, 0b00000100 };
    uint8_t ciphertext[3];
    uint8_t decrypted[3];
    uint8_t counter_start = 0b00000000;
    uint16_t key = 0b0111111101;

    printf("Original Plaintext:\n");
    for (int i = 0; i < 3; i++) {
        print_binary(plaintext[i]);
        printf(" ");
    }
    printf("\n");

    // Encrypt
    ctr_process(plaintext, ciphertext, 3, key, counter_start);

    printf("Ciphertext:\n");
    for (int i = 0; i < 3; i++) {
        print_binary(ciphertext[i]);
        printf(" ");
    }
    printf("\n");

    // Decrypt (same as encrypt in CTR mode)
    ctr_process(ciphertext, decrypted, 3, key, counter_start);

    printf("Decrypted Plaintext:\n");
    for (int i = 0; i < 3; i++) {
        print_binary(decrypted[i]);
        printf(" ");
    }
    printf("\n");

    return 0;
}
