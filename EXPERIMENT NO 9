#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
// Convert string to uppercase manually
void toUpperCase(char str[]) {
    for (int i = 0; str[i] != '\0'; i++) {
        str[i] = toupper(str[i]);
    }
}
// Function to generate Playfair matrix
void generateMatrix(char key[], char matrix[SIZE][SIZE]) {
    int used[26] = {0};
    int idx = 0;
    toUpperCase(key);
    // Fill matrix with key
    for (int i = 0; key[i] != '\0'; i++) {
        char ch = (key[i] == 'J') ? 'I' : key[i];
        if (isalpha(ch) && !used[ch - 'A']) {
            matrix[idx / SIZE][idx % SIZE] = ch;
            used[ch - 'A'] = 1;
            idx++;
        }
    }
    // Fill matrix with remaining letters
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue; // I/J combined
        if (!used[ch - 'A']) {
            matrix[idx / SIZE][idx % SIZE] = ch;
            used[ch - 'A'] = 1;
            idx++;
        }
    }
}
// Helper to locate position of a letter
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}
// Decrypt pair
void decryptPair(char matrix[SIZE][SIZE], char a, char b) {
    int row1, col1, row2, col2;
    findPosition(matrix, a, &row1, &col1);
    findPosition(matrix, b, &row2, &col2);
    if (row1 == row2) {
        // Same row: move left
        printf("%c%c", matrix[row1][(col1 + SIZE - 1) % SIZE], matrix[row2][(col2 + SIZE - 1) % SIZE]);
    } else if (col1 == col2) {
        // Same column: move up
        printf("%c%c", matrix[(row1 + SIZE - 1) % SIZE][col1], matrix[(row2 + SIZE - 1) % SIZE][col2]);
    } else {
        // Rectangle swap columns
        printf("%c%c", matrix[row1][col2], matrix[row2][col1]);
    }
}
int main() {
    char key[] = "MONARCHY";  // Example key (replace with actual key if known)
    char matrix[SIZE][SIZE];
    char ciphertext[] = 
        "KXJEYUREBEZWEHEWRYTUHEYFS"
        "KREHEGOYFIWTTTUOLKSYCAJPO"
        "BOTEIZONTXBYBNTGONEYCUZWR"
        "GDSONSXBOUYWRHEBAAHYUSEDQ";
    generateMatrix(key, matrix);

    printf("Generated Playfair matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }
    printf("\nDecrypted text:\n");
    for (int i = 0; i < strlen(ciphertext); i += 2) {
        char a = ciphertext[i];
        char b = ciphertext[i + 1];
        decryptPair(matrix, a, b);
    }
    printf("\n");
    return 0;
}
