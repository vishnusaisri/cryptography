#include <stdio.h>
#include <string.h>

#define BLOCK_SIZE 8

// Mock block encryption: XOR with key
void encrypt_block(unsigned char *in, unsigned char *key, unsigned char *out) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        out[i] = in[i] ^ key[i];
    }
}

// ECB mode
void ecb_encrypt(unsigned char *plaintext, int length, unsigned char *key, unsigned char *ciphertext) {
    for (int i = 0; i < length; i += BLOCK_SIZE) {
        encrypt_block(&plaintext[i], key, &ciphertext[i]);
    }
}

// CBC mode
void cbc_encrypt(unsigned char *plaintext, int length, unsigned char *key, unsigned char *iv, unsigned char *ciphertext) {
    unsigned char prev[BLOCK_SIZE];
    memcpy(prev, iv, BLOCK_SIZE);

    for (int i = 0; i < length; i += BLOCK_SIZE) {
        unsigned char temp[BLOCK_SIZE];
        for (int j = 0; j < BLOCK_SIZE; j++) {
            temp[j] = plaintext[i + j] ^ prev[j];
        }
        encrypt_block(temp, key, &ciphertext[i]);
        memcpy(prev, &ciphertext[i], BLOCK_SIZE);
    }
}

// CFB mode
void cfb_encrypt(unsigned char *plaintext, int length, unsigned char *key, unsigned char *iv, unsigned char *ciphertext) {
    unsigned char feedback[BLOCK_SIZE];
    memcpy(feedback, iv, BLOCK_SIZE);

    for (int i = 0; i < length; i += BLOCK_SIZE) {
        unsigned char temp[BLOCK_SIZE];
        encrypt_block(feedback, key, temp);
        for (int j = 0; j < BLOCK_SIZE; j++) {
            ciphertext[i + j] = plaintext[i + j] ^ temp[j];
        }
        memcpy(feedback, &ciphertext[i], BLOCK_SIZE);
    }
}

// Pad the message
int pad(unsigned char *plaintext, int length) {
    int pad_len = BLOCK_SIZE - (length % BLOCK_SIZE);
    plaintext[length] = 0x80;  // 1000 0000 (1 bit followed by 0s)
    for (int i = 1; i < pad_len; i++) {
        plaintext[length + i] = 0x00;
    }
    return length + pad_len;
}

// Print hex
void print_hex(unsigned char *data, int len) {
    for (int i = 0; i < len; i++) {
        printf("%02X ", data[i]);
    }
    printf("\n");
}

int main() {
    unsigned char plaintext[64] = "HELLO123WORLD456";
    int length = strlen((char *)plaintext);
    unsigned char key[BLOCK_SIZE] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8};
    unsigned char iv[BLOCK_SIZE] = {0};

    printf("Original plaintext: %s\n", plaintext);

    // Pad
    int padded_len = pad(plaintext, length);

    unsigned char ct_ecb[64] = {0};
    unsigned char ct_cbc[64] = {0};
    unsigned char ct_cfb[64] = {0};

    printf("\nPadded plaintext (hex):\n");
    print_hex(plaintext, padded_len);

    ecb_encrypt(plaintext, padded_len, key, ct_ecb);
    printf("\nECB ciphertext:\n");
    print_hex(ct_ecb, padded_len);

    cbc_encrypt(plaintext, padded_len, key, iv, ct_cbc);
    printf("\nCBC ciphertext:\n");
    print_hex(ct_cbc, padded_len);

    cfb_encrypt(plaintext, padded_len, key, iv, ct_cfb);
    printf("\nCFB ciphertext:\n");
    print_hex(ct_cfb, padded_len);

    return 0;
}
