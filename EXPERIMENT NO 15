#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX_LEN 1000
#define NUM_SHIFTS 26
// English letter frequency (a-z) from most common to least common
double english_freq[26] = {
    8.167,  // A
    1.492,  // B
    2.782,  // C
    4.253,  // D
    12.702, // E
    2.228,  // F
    2.015,  // G
    6.094,  // H
    6.966,  // I
    0.153,  // J
    0.772,  // K
    4.025,  // L
    2.406,  // M
    6.749,  // N
    7.507,  // O
    1.929,  // P
    0.095,  // Q
    5.987,  // R
    6.327,  // S
    9.056,  // T
    2.758,  // U
    0.978,  // V
    2.360,  // W
    0.150,  // X
    1.974,  // Y
    0.074   // Z
};
typedef struct {
    int shift;
    double score;
    char plaintext[MAX_LEN];
} Attempt;
// Decrypt with shift
void decrypt(char *ciphertext, int shift, char *output) {
    for (int i = 0; ciphertext[i]; i++) {
        char c = ciphertext[i];
        if (isalpha(c)) {
            char base = isupper(c) ? 'A' : 'a';
            output[i] = ( ( (c - base - shift + 26) % 26 ) + base );
        } else {
            output[i] = c;
        }
    }
    output[strlen(ciphertext)] = '\0';
}
// Score text by frequency match
double score_text(char *text) {
    int counts[26] = {0};
    int total = 0;
    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            counts[toupper(text[i]) - 'A']++;
            total++;
        }
    }
    if (total == 0) return 0.0;
    double score = 0.0;
    for (int i = 0; i < 26; i++) {
        double freq = (counts[i] * 100.0) / total;
        double diff = english_freq[i] - freq;
        score -= diff * diff;  // lower difference is better
    }
    return score;
}
// Sort attempts by score descending
int cmp_attempts(const void *a, const void *b) {
    Attempt *aa = (Attempt*)a;
    Attempt *bb = (Attempt*)b;
    if (aa->score < bb->score) return 1;
    if (aa->score > bb->score) return -1;
    return 0;
}
int main() {
    char ciphertext[MAX_LEN];
    int topN;
    printf("Enter ciphertext: ");
    fgets(ciphertext, MAX_LEN, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = 0;
    printf("How many top results to display? ");
    scanf("%d", &topN);
    Attempt attempts[NUM_SHIFTS];
    for (int shift = 0; shift < NUM_SHIFTS; shift++) {
        decrypt(ciphertext, shift, attempts[shift].plaintext);
        attempts[shift].shift = shift;
        attempts[shift].score = score_text(attempts[shift].plaintext);
    }
    qsort(attempts, NUM_SHIFTS, sizeof(Attempt), cmp_attempts);
    printf("\nTop %d guesses:\n", topN);
    for (int i = 0; i < topN && i < NUM_SHIFTS; i++) {
        printf("Shift: %2d  Score: %.2f\n%s\n\n", 
               attempts[i].shift, attempts[i].score, attempts[i].plaintext);
    }
    return 0;
}
