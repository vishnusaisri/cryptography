#include <stdio.h>

// Extended Euclidean Algorithm
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }
    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);

    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

// Function to compute multiplicative inverse of e mod phi
int mod_inverse(int e, int phi) {
    int x, y;
    int g = extended_gcd(e, phi, &x, &y);
    if (g != 1) {
        // Inverse doesn't exist
        return -1;
    } else {
        // Make x positive
        return (x % phi + phi) % phi;
    }
}

int main() {
    int e = 31;
    int n = 3599;
    int p = 59;
    int q = 61;

    printf("Given public key: e = %d, n = %d\n", e, n);
    printf("Determined primes: p = %d, q = %d\n", p, q);

    int phi = (p - 1) * (q - 1);
    printf("Computed phi(n): %d\n", phi);

    int d = mod_inverse(e, phi);
    if (d == -1) {
        printf("No multiplicative inverse found!\n");
    } else {
        printf("Private key d: %d\n", d);
    }

    return 0;
}
